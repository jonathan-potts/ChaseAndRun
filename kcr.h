/***************************************************************************************
 * Filename: kcr.h
 *
 * Description: Header file containing all KCR CBs, defines, includes, macros and
 *              function declarations that are required in KCR.
 ***************************************************************************************/

#ifndef __KCR_H_
#define __KCR_H_

/***************************************************************************************
 * Includes
 ***************************************************************************************/
#include <assert.h>
#include <stdio.h>
#include <time.h> 
#include <stdlib.h>
#include <listjrp.h>
#include <listv2.h>
#include <math.h>

/***************************************************************************************
 * Macros
 ***************************************************************************************/

/***************************************************************************************
 * Minimum and maximum
 ***************************************************************************************/
#define KCR_MIN(X,Y) (((X)<(Y))?(X):(Y))
#define KCR_MAX(X,Y) (((X)>(Y))?(X):(Y))

/***************************************************************************************
 * Modulus
 ***************************************************************************************/
#define KCR_MOD(X,N) (((long)(X)+(long)(N)) % ((long)(N)))

/***************************************************************************************
 * Difference
 ***************************************************************************************/
#define KCR_DIFF(X,Y,N) ((abs((long)(X)-(long)(Y)) <= (N)/2) ? ((long)(X)-(long)(Y)) : \
                        ((long)(X)-(long)(Y) > 0 ? (long)(X)-(long)(Y)-(long)(N) : (long)(X)-(long)(Y)+(long)(N)))

/***************************************************************************************
 * Pre-processor definitions
 ***************************************************************************************/

/***************************************************************************************
 * Yes and no.
 ***************************************************************************************/
#define KCR_YES 1
#define KCR_NO  2

/***************************************************************************************
 * Return codes.
 ***************************************************************************************/
#define KCR_RC_OK    1
#define KCR_RC_ERROR 2

/***************************************************************************************
 * Codes for X and Y
 ***************************************************************************************/
#define KCR_X    1
#define KCR_Y    2

/***************************************************************************************
 * pi
 ***************************************************************************************/
#define KCR_PI 3.14159265358979

/***************************************************************************************
 * Control blocks
 ***************************************************************************************/

/***************************************************************************************
 * Name: KCR_POPULATION
 *
 * Purpose: Stores all population-level data.
 ***************************************************************************************/
typedef struct kcr_population
{
	/***********************************************************************************
	 * Root of the list of kcr_individual CBs for this population
	 ***********************************************************************************/
    LIST_ROOT individual_list_root;

	/***********************************************************************************
	 * List element of this population
	 ***********************************************************************************/
    LIST_ELT list_elt;

	/***********************************************************************************
	 * Index of this population
	 ***********************************************************************************/
    unsigned short index;

} KCR_POPULATION;

/***************************************************************************************
 * Name: KCR_INDIVIDUAL
 *
 * Purpose: Stores all individual-level data.
 ***************************************************************************************/
typedef struct kcr_individual
{
	/***********************************************************************************
	 * Current x- and y-position
	 ***********************************************************************************/
    unsigned long current_x_pos;
    unsigned long current_y_pos;

	/***********************************************************************************
	 * List element of this individual.
	 ***********************************************************************************/
    LIST_ELT list_elt;

	/***********************************************************************************
	 * Index of this individual.
	 ***********************************************************************************/
    unsigned short index;

} KCR_INDIVIDUAL;

/***************************************************************************************
 * Name: KCR_ROOT_DATA
 *
 * Purpose: The place in which all KCR data is rooted.
 ***************************************************************************************/
typedef struct kcr_root_data
{
	/***********************************************************************************
	 * Time for simulation to run.
	 ***********************************************************************************/
    double total_time;

	/***********************************************************************************
	 * Number of individuals per population
	 ***********************************************************************************/
    unsigned short no_indivs;

	/***********************************************************************************
	 * Number of populations
	 ***********************************************************************************/
    unsigned short no_pops;

	/***********************************************************************************
	 * Root of the list of kcr_population CBs.
	 ***********************************************************************************/
    LIST_ROOT population_list_root;

	/***********************************************************************************
	 * Current time.
	 ***********************************************************************************/
    unsigned long current_time;

	/***********************************************************************************
	 * Time to start measuring positions.
	 ***********************************************************************************/
    double start_measure_time;

	/***********************************************************************************
	 * Width of box.
	 ***********************************************************************************/
    unsigned long box_width;

	/***********************************************************************************
	 * Height of box.
	 ***********************************************************************************/
    unsigned long box_height;
    
	/***********************************************************************************
	 * Model parameters
	 ***********************************************************************************/
    double *deltas;
    double *aijs;
    double l_val;

	/***********************************************************************************
	 * Environmental data and weighting
	 ***********************************************************************************/
    double *env_data;
    double env_weight;

	/***********************************************************************************
	 * Set packing_term to 0 if there is no packing term; 1 if there is (default = 0).
	 * The functional form of the packing term is 1/(1+kappa*total_population_at_point)
	 ***********************************************************************************/
    unsigned short packing_term;
    double kappa;

} KCR_ROOT_DATA;

/***************************************************************************************
 * Function declarations.
 ***************************************************************************************/

/***************************************************************************************
 * kcrmain.c
 ***************************************************************************************/
int main(int, char**);

/***************************************************************************************
 * kcrinit.c
 ***************************************************************************************/
KCR_ROOT_DATA *kcr_init(unsigned short,
                        unsigned short,
                        double,
                        double,
                        FILE *,
                        unsigned long,
                        unsigned long,
                        FILE *,
                        double,
						FILE *,
						double,
						unsigned short,
						double);
KCR_POPULATION *kcr_pop_init(unsigned short, KCR_ROOT_DATA *);
KCR_INDIVIDUAL *kcr_indiv_init(unsigned short, KCR_POPULATION *, KCR_ROOT_DATA *);
unsigned short kcr_setup_array(FILE *, KCR_ROOT_DATA *, double *);
void kcr_set_init_conds(FILE *, KCR_ROOT_DATA *);
void kcr_term(KCR_ROOT_DATA *);
void kcr_pop_term(KCR_POPULATION *);
void kcr_indiv_term(KCR_INDIVIDUAL *);

/***************************************************************************************
 * kcrproc.c
 ***************************************************************************************/
void kcr_perform_simulation(FILE *, KCR_ROOT_DATA *);
void kcr_move_individual(KCR_INDIVIDUAL *, 
                         KCR_POPULATION *, 
						 KCR_ROOT_DATA *);
void kcr_move_individual1d(KCR_INDIVIDUAL *, 
                           KCR_POPULATION *, 
						   KCR_ROOT_DATA *);
void kcr_setup_env(FILE *, KCR_ROOT_DATA *);

#endif /* __KCR_H_ */
