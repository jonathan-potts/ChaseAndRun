/***************************************************************************************
 * Filename: listv2.h
 *
 * Description: Header file containing CBs, macros and preprocessor definitions
 *              used for list v2 manipulation.
 ***************************************************************************************/

#ifndef __LISTV2_H_
#define __LISTV2_H_

/***************************************************************************************
 * Includes
 ***************************************************************************************/
#include <windows.h>
#include <assert.h>
#include <stdio.h>
#include <stdlib.h>
#include <trace.h>

/***************************************************************************************
 * Control blocks
 ***************************************************************************************/

/***************************************************************************************
 * Name: LIST_V2_ELT
 *
 * Purpose: An element in a list.
 ***************************************************************************************/
typedef struct list_v2_elt
{
	/***********************************************************************************
	 * Pointer to data.
	 ***********************************************************************************/
	void *data;

	/***********************************************************************************
	 * Pointer to next element.
	 ***********************************************************************************/
	struct list_v2_elt *next;

	/***********************************************************************************
	 * Pointer to previous element.
	 ***********************************************************************************/
	struct list_v2_elt *previous;

} LIST_V2_ELT;

/***************************************************************************************
 * Name: LIST_V2_ROOT
 *
 * Purpose: Root of a list.  Points to the first element in the list.
 ***************************************************************************************/
typedef LIST_V2_ELT * LIST_V2_ROOT;

/***************************************************************************************
 * Function declarations.
 ***************************************************************************************/

/***************************************************************************************
 * listv2.c
 ***************************************************************************************/
void *list_v2_get_first(LIST_V2_ROOT);
void *list_v2_get_next(LIST_V2_ELT);
void list_v2_add_to_start(LIST_V2_ROOT *, LIST_V2_ELT *, void *);
void list_v2_delete_current(LIST_V2_ROOT *, LIST_V2_ELT);

/***************************************************************************************
 * Macros
 ***************************************************************************************/

/***************************************************************************************
 * Create list.
 *
 * Parameters: ROOT - root of list
 ***************************************************************************************/
#define LIST_V2_CREATE(ROOT) (ROOT) = NULL

/***************************************************************************************
 * Add element to start of list.
 *
 * Parameters: ROOT - root of the list
 *             ELT  - element of list to add
 *             DATA - pointer to the data pointed to by the list element
 ***************************************************************************************/
#define LIST_V2_ADD_TO_START(ROOT, ELT, DATA) list_v2_add_to_start(ROOT, ELT, DATA)

/***************************************************************************************
 * Delete first element from list.
 *
 * Parameters: ROOT - root of list
 ***************************************************************************************/
#define LIST_V2_DELETE_FIRST(ROOT) \
	 assert((ROOT) != NULL); \
	 ((ROOT) = (ROOT)->next)

/***************************************************************************************
 * Delete element from list.
 *
 * Parameters: ROOT - root of list
 ***************************************************************************************/
#define LIST_V2_DELETE_CURRENT(ROOT, ELT) list_v2_delete_current(ROOT, ELT)
	 
/***************************************************************************************
 * Get data stored in next element in list after a given element.
 *
 * Parameters: ELT - given list element
 *
 * Returns: Pointer to data contained in next element.  NULL if none is present.
 ***************************************************************************************/
#define LIST_V2_GET_NEXT(ELT) list_v2_get_next(ELT)

/***************************************************************************************
 * Get data stored in first element of given list.
 *
 * Parameters: ROOT - root of list
 *
 * Returns: Pointer to data stored in first element.  NULL if none is present.
 ***************************************************************************************/
#define LIST_V2_GET_FIRST(ROOT) list_v2_get_first(ROOT)

/***************************************************************************************
 * Check that a list is empty.
 ***************************************************************************************/
#define LIST_V2_EMPTY(ROOT) ((ROOT) == NULL)

#endif /* __LISTV2_H_ */
